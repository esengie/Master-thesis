---------------------------------------
Здр, шг, мой рук валис. Моя дипломная работа это генерация зависимых языков по спецификации пользователя
---------------------------------------
Начнем с введения в область. Если кратко, в языках с зависимыми типами типы могут зависеть от термов.
Я приведу пример, чтобы это немного пояснить.
Во многих языках программирования возникают ошибки связанные с доступом за границу массива.
Аналогом этого в Хаскель является взятие первого элемента в списке.

Как видим все хорошо, пока есть первый элемент.

В таких ситуациях принято кидать исключения если на вход поданы некорректные данные.
Эту проблему можно решить иначе, наложив на вход дополнительные ограничения.
А именно -- не принимать такие входные данные.

Как правило программисты все равно проверяют эти ограничения перед вызовом функции или обладают дополнительной информацией,
здесь передача этого знания просто явно требуется компилятором.

Из других примеров ограничений: функция может также принмать только
Упорядоченные списки.
массивы простых чисел, длины простого числа.
---------------------------------------
Зависимые языки достаточно экспрессивный инструмент,
и обычно их используют для формализации математики и написания доказательств.

Иногда нужные нам конструкции отстутсвуют в языке.
Тогда один из подходов это написание своих языков с зависимыми типами.
Или если мы просто хотим поэкспериментировать с определением языка, но не хотим писать и проверять код на корректность
Процесс является достаточно механическим


 Со слов Влеры после того, как вы написали пару тройку таких языков. Это становится скучно и
 нужно писать много boilerplate кода.
---------------------------------------
? Эта работа выполнена в контексте большей, направленной на генерацию языков программирования целиком.
? По сути нужна только возможность определения функций и парсера из именованного к неименованному представлению.
---------------------------------------

---------------------------------------
Чего мы хотим от любого языка -- конструкции, как эти конструкции можно использовать и как они вычисляются.
---------------------------------------
---------------------------------------
Одной из проблем из больших проблем с которой сталкивается разработчик функциональных языков является подстановка.

При наивном подходе, когда переменные это просто строки возникает проблема проверки термов на альфа-эквивалентность

На каждую задачу - 1-2 слайда

по сути генерируется библиотечка для работы с языком.
