---------------------------------------
Здр, шг, мой рук валис. Моя дипломная работа это генерация зависимых языков по спецификации пользователя
---------------------------------------
Начнем с введения в область. Если кратко, в языках с зависимыми типами типы могут зависеть от термов.
Я приведу пример, чтобы это немного пояснить.
Во многих языках программирования возникают ошибки связанные с доступом за границу массива.
Аналогом этого в Хаскель является взятие первого элемента в списке.

На примере видим что все хорошо, пока есть первый элемент.

В таких ситуациях принято кидать исключения если на вход поданы некорректные данные.
Эту проблему можно решить иначе, наложив на вход дополнительные ограничения.
А именно -- не принимать такие входные данные.

Из других примеров ограничений: функция может также принмать только
Упорядоченные списки.
массивы простых чисел, длины простого числа.
################################################################################
Зависимые языки достаточно экспрессивный инструмент,
и обычно их используют для формализации математики и написания доказательств.

Иногда нужные нам конструкции отстутсвуют в языке.
Тогда один из подходов это написание своих языков с зависимыми типами.
Или если мы просто хотим поэкспериментировать с определением языка, но не хотим писать
и проверять написанный код на корректность

Но могут возникнуть ситуации, когда конструкций языка недостаточно, для описания нашей теории.
Тогда приходится описывать и реализовывать свой язык.

Однако проверка типов теперь не совсем тривиальная задача,
так как для проверки типов мы должны уметь вычислять термы.

################################################################################
% Эта работа выполнена в контексте большей, направленной на генерацию языков программирования целиком.
% По сути нужна только возможность определения функций и парсера из именованного к неименованному представлению.


################################################################################

################################################################################
Чего мы хотим от любого языка -- конструкции, как эти конструкции можно использовать и как они вычисляются.
################################################################################

################################################################################
Одной из первых проблем которую нужно решать при такого рода реализации языка это представление АСТ языка.
При наивном подходе к представлению АСТ, когда переменные это просто строки возникает проблема проверки
термов на альфа-эквивалентность и проблема захвата свободных переменных.

Поэтому было решено использовать индексы де брейна
################################################################################


################################################################################


################################################################################

################################################################################

################################################################################



На каждую задачу - 1-2 слайда

по сути генерируется библиотечка для работы с языком.
